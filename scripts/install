#!/bin/sh

# Notes:
# ‚Äì macOS `find` requires a path parameter.

# Environment variables
ROOT=$PWD
BIN=~/.local/bin
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-~/.config}
CONFIG=$XDG_CONFIG_HOME/krabby
OS=$(uname -s)
STATIC_BUILD=${STATIC_BUILD:-no}
INTERACTIVE=${INTERACTIVE:-yes}

# Faces
none='\033[0m'
bold='\033[1m'
red='\033[31m'
green='\033[32m'
yellow='\033[33m'
blue='\033[34m'
magenta='\033[35m'
cyan='\033[36m'

# Main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

main() {

  # Options
  while test $# -gt 0; do
    case "$1" in
      -no-confirm) INTERACTIVE=no ;;
    esac
    shift
  done

  # Dependencies
  print_horizontal_line
  # Build dependencies
  printf "${green}Dependencies${none}: git jq\n"
  check_dependency git Git https://git-scm.com
  check_dependency jq jq https://stedolan.github.io/jq/
  printf "${green}Dependencies${none}: crystal shards\n"
  check_dependency crystal Crystal https://crystal-lang.org
  check_dependency shards Shards https://crystal-lang.org
  # Runtime dependencies
  case "$OS" in
    Linux|FreeBSD|OpenBSD)
      printf "${green}Dependencies${none}: dmenu (Optional, (Linux|FreeBSD|OpenBSD)-only)\n"
      check_dependency dmenu dmenu https://tools.suckless.org/dmenu/ yes
      case "$XDG_SESSION_TYPE" in
        wayland)
          printf "${green}Dependencies${none}: wl-clipboard (Optional, Wayland)\n"
          check_dependency wl-copy wl-clipboard https://github.com/bugaevc/wl-clipboard yes
          check_dependency wl-paste wl-clipboard https://github.com/bugaevc/wl-clipboard yes
          ;;
        x11)
          printf "${green}Dependencies${none}: xclip (Optional, X11)\n"
          check_dependency xclip xclip https://github.com/astrand/xclip yes
          ;;
        *)
          printf "${red}Warning${none}: Please set XDG_SESSION_TYPE for plumbing (https://github.com/alexherbo2/krabby/blob/master/bin/plumb)\n" > /dev/stderr
          ;;
      esac
      ;;
  esac
  printf "${green}Dependencies${none}: mpv pandoc (Optional)\n"
  check_dependency mpv mpv https://mpv.io yes
  check_dependency pandoc Pandoc https://pandoc.org yes

  # Extension: Krabby
  name='Krabby'
  description='A keyboard interface to the web'
  url='https://github.com/bluehar/krabby'
  path=$CONFIG
  dependencies='jq'
  print_horizontal_line
  print_info "$name" "$description" "$url" "$path" "$dependencies"
  # Initialize ~/.config/krabby if it does not exist.
  if test ! -e "$CONFIG"; then
    printf "${green}Initializing${none}: %s\n" "$CONFIG"
    cp -R share/krabby "$CONFIG"
    find "$CONFIG" -maxdepth 1
    git init "$CONFIG"
  fi
  # Self-updates
  # Create ~/.config/krabby/extensions/krabby if it does not exist.
  path=$CONFIG/extensions/krabby
  if test ! -e "$path"; then
    printf "${green}Cloning Krabby for self-updates${none}: %s\n" "$path"
    git clone . "$path"
  fi
  # Navigate to ~/.config/krabby
  cd "$CONFIG"
  # Copy krabby/src to ~/.config/krabby/packages
  mkdir -p packages
  printf "${green}Copying${none}: %s ‚Üí %s\n" "$ROOT/src/." "$CONFIG/packages"
  cp -R "$ROOT/src/." packages
  (cd "$ROOT/src"; find .)
  # Copy krabby/bin to ~/.local/bin
  mkdir -p "$BIN"
  printf "${green}Copying${none}: %s ‚Üí %s\n" "$ROOT/bin/." "$BIN"
  cp -R "$ROOT/bin/." "$BIN"
  (cd "$ROOT/bin"; find .)
  # Fetch packages to ~/.config/krabby/packages
  ("$ROOT/scripts/fetch" packages)
  # Run user‚Äôs Makefile (~/.config/krabby)
  if test -e Makefile; then
    make
  fi
  # Print install instructions for Chrome and Firefox
  print_install_instructions

  # Extension: Commands
  name='Commands'
  description='WebExtension API to perform browser actions'
  url='https://github.com/bluehar/webextension-commands'
  path=$CONFIG/extensions/commands
  dependencies='jq'
  print_horizontal_line
  print_info "$name" "$description" "$url" "$path" "$dependencies"
  clone_repo "$url" "$path"
  cd "$path"
  git pull
  make
  print_install_instructions

  # Extension: Shell
  name='Shell'
  description='WebExtension API to execute external commands through native messaging'
  url='https://github.com/bluehar/webextension-shell'
  path=$CONFIG/extensions/shell
  dependencies='crystal shards jq'
  print_horizontal_line
  print_info "$name" "$description" "$url" "$path" "$dependencies"
  clone_repo "$url" "$path"
  cd "$path"
  git pull
  cd "$path/host"
  make install static="$STATIC_BUILD"
  cd "$path/extension"
  make
  print_install_instructions

  # Extension: Editor
  name='Editor'
  description='Open an external editor to edit text inputs'
  url='https://github.com/bluehar/webextension-editor'
  path=$CONFIG/extensions/editor
  dependencies='jq'
  print_horizontal_line
  print_info "$name" "$description" "$url" "$path" "$dependencies"
  clone_repo "$url" "$path"
  cd "$path"
  git pull
  make
  print_install_instructions

  # Extension: dmenu
  name='dmenu'
  description='Tab search, selection and beyond with a dmenu filter program'
  url='https://github.com/bluehar/webextension-dmenu'
  path=$CONFIG/extensions/dmenu
  dependencies='dmenu jq'
  print_horizontal_line
  print_info "$name" "$description" "$url" "$path" "$dependencies"
  clone_repo "$url" "$path"
  cd "$path"
  git pull
  make
  print_install_instructions

  # Post-installation
  print_horizontal_line
  cat <<'EOF'
Installation finished ü¶Ä

    ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
    ‚îÇ $ cd ~/.config/krabby     ‚îÇ
    ‚îÇ $ kak config.js           ‚îÇ
    ‚îÇ $ make [chrome] [firefox] ‚îÇ
    ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚Ä¢ How to update Krabby:

    ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
    ‚îÇ $ cd ~/.config/krabby                       ‚îÇ
    ‚îÇ $ make update [static=no] [interactive=yes] ‚îÇ
    ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
EOF
}

# Helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

on_key() {
  prompt=$1
  printf "${blue}‚ùØ${none} $prompt\n"
  read key < /dev/tty
  printf '\r'
}

print_horizontal_line() {
  COLUMNS=$(tput cols)
  line=''
  index=0
  while test "$index" -lt "$COLUMNS"; do
    line="${line}‚îÄ"
    index=$((index + 1))
  done
  printf '%s\n' "$line"
}

check_dependency() {
  command=$1
  name=$2
  url=$3
  optional=${4:-no}
  if command -v "$command" > /dev/null 2>&1; then
    printf "‚ùØ ${green}%s${none}\n" "$name"
  else
    printf "‚ùØ ${red}%s${none}\n" "$name" > /dev/stderr
    printf 'Please install %s\n' "$name" > /dev/stderr
    printf '%s\n' "$url" > /dev/stderr
    if test "$optional" != yes; then
      exit 1
    fi
  fi
}

print_info() {
  name=$1
  description=$2
  url=$3
  path=$4
  dependencies=$5
  printf "${green}Extension${none}: ${bold}%s${none}\n" "$name"
  printf "${green}Description${none}: %s\n" "$description"
  printf "${green}Repository${none}: %s\n" "$url"
  printf "${green}Path${none}: %s\n" "$path"
  printf "${green}Dependencies${none}: %s\n" "$dependencies"
  printf "${green}Building${none}:\n"
}

print_install_instructions() {
  chrome_target=${1:-target/chrome}
  firefox_target=${2:-target/firefox}
  printf "${green}Installing${none}:\n"
  printf "${cyan}Chrome${none}:\n"
  (cd "$chrome_target"; printf "Open the ${bold}Extensions${none} page by navigating to chrome://extensions, enable ${bold}Developer mode${none} then ${bold}Load unpacked${none} to select the extension directory: %s\n" "$PWD")
  printf "${cyan}Firefox${none}: only developer or unbranded version (see https://wiki.mozilla.org/Add-ons/Extension_Signing#FAQ)\n"
  printf "Open about:config, change ${bold}xpinstall.signatures.required${none} to ${bold}false${none}\n"
  (cd "$firefox_target"; printf "Open about:addons ‚ùØ ${bold}Extensions${none}, click ${bold}Install add-on from file${none} and select the package file: %s\n" "$PWD/package.zip")
  if test "$INTERACTIVE" = yes; then
    on_key 'Press any key to continue'
  fi
}

clone_repo() {
  url=$1
  path=$2
  if test ! -e "$path"; then
    git clone "$url" "$path"
  fi
}

main "$@"
